#!/usr/bin/env zsh
#
# Define zdot command
#
# Authors:
#   Larry Gordon
#
# Usage: zdot
#
# @see https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org#writing-simple-completion-functions-using-_describe
#
# License:
#   The MIT License (MIT) <http://psyrendust.mit-license.org/2021/license.html>
# ------------------------------------------------------------------------------

function zdot() {
  # [[ $# -gt 0 ]] || {
  #   _zdot::help
  #   return 1
  # }

  local command="$1"

  case "$command" in
    ""|-h|--help)
      _zdot::help
      return 0;;
  esac

  shift
  # Subcommand functions start with _ so that they don't
  # appear as completion entries when looking for `zdot`
  (( $+functions[_zdot::$command] )) || {
    _zdot::log "Unknown command: $command"
    _zdot::help
    return 1
  }

  _zdot::$command "$@"
}

function _zdot {
  local -a cmds subcmds
  cmds=(
    'alias:Get the value of an alias'
    'check:Check install'
    'clear:Run clear subcommand'
    'edit:Open dotfiles vscode workspace'
    'load:Source a file if it exists'
    'notes:Open notes folder in vscode'
    'paths:Output PATH, MANPATH and INFOPATH into distinct lines'
    'reload:Reload the current zsh session'
    'update:Update dotfiles using antidote'
    'help:Usage information'
  )

  if (( CURRENT == 2 )); then
    _describe 'command' cmds
  elif (( CURRENT == 3 )); then
    case "$words[2]" in
      clear)
        subcmds=(
          'antidote:Clear antidote cache and config'
          'cache:Clear the zdot cache directory'
          'config:Clear cached ${ZDOT_ANTIDOTE_PLUGINS_NAME}.zsh config file'
          'help:Usage information'
        )
        _describe 'command' subcmds;;
    esac
  fi

  return 0
}

if (( ! $+functions[compinit] )); then
  autoload -Uz compinit
  compinit
fi
compdef _zdot zdot

function _zdot::log() {
  chalk -t "[{yellow zdot}] $*"
}

function _zdot::logsuccess() {
  _zdot::log "{green $* âœ”}"
}

function _zdot::noop() {}

function _zdot::help() {
  cat <<EOF
Usage: zdot <command> [options]

Available commands:

  alias  <alias>      Get the value of an alias
  check               Check install
  clear               Run clear subcommand
  edit                Open dotfiles vscode workspace
  load   <script>     Source a file if it exists
  notes               Open notes folder in vscode
  paths               Output PATH, MANPATH and INFOPATH into distinct lines
  reload              Reload the current zsh session
  update              Update dotfiles using antidote
  help, -h, --help    Usage information

EOF
}

#
# Get the value of an alias.
#
# Arguments:
#    1. alias - The alias to get its value from
# STDOUT:
#    The value of alias $1 (if it has one).
# Return value:
#    0 if the alias was found,
#    1 if it does not exist
#
function _zdot::alias() {
  (( $+aliases[$1] )) && echo $aliases[$1]
}

function _zdot::check() {
  _zdot::log "check install"
  _zdot::load "$ZDOT_BIN/check-install" &&
  _zdot::logsuccess "check install"
}

function _zdot::edit() {
  code "$ZDOT/dotfiles.code-workspace"
}

function _zdot::load() {
  [[ -z "$1" ]] && {
    cat <<EOF
Source a file if it exists

Usage: zdot load <script>

EOF
    return 1
  }

  [[ -f "$1" ]] && . "$1"
}

function _zdot::notes() {
  [[ -d "$HOME/workspace/notes" ]] && code "$HOME/workspace/notes"
  [[ -d "$HOME/dev/notes" ]] && code "$HOME/dev/notes"
}

function _zdot::paths() {
  _zdot::log "========== PATH =============="
  echo "$PATH" | tr ':' '\n' | xargs -I {} echo "  {}"; echo "";
  _zdot::log "========== MANPATH ==========="
  echo "$MANPATH" | tr ':' '\n' | xargs -I {} echo "  {}"; echo "";
  _zdot::log "========== INFOPATH =========="
  echo "$INFOPATH" | tr ':' '\n' | xargs -I {} echo "  {}"; echo "";
  _zdot::log "========== FPATH =========="
  echo "$fpath" | tr ' /' '\n/' | xargs -I {} echo "  {}"; echo "";
}

# Taken from OMZ
function _zdot::reload {
  _zdot::log "reloading zsh"

  # Delete current completion cache
  _zdot::log "removing completion cache"
  command rm -f $_comp_dumpfile $ZSH_COMPDUMP
  _zdot::logsuccess "removing completion cache"

  # Old zsh versions don't have ZSH_ARGZERO
  local zsh="${ZSH_ARGZERO:-${functrace[-1]%:*}}"

  _zdot::logsuccess "reloading zsh"
  # Check whether to run a login shell
  [[ "$zsh" = -* || -o login ]] && exec -l "${zsh#-}" || exec "$zsh"
}

function _zdot::update() {
  zdot check && sleep 2 &&
  zdot clear config && sleep 2 &&
  _zdot::update::antidote && sleep 2 &&
  zdot reload
}

function _zdot::update::antidote() {
  _zdot::log "update antidote and installed packages"
  antidote update &&
  _zdot::logsuccess "update antidote and installed packages"
}

function _zdot::clear() {
  local command="$1"

  case "$command" in
    ""|-h|--help)
      _zdot::clear::help
      return 0;;
  esac

  shift
  # Subcommand functions start with _ so that they don't
  # appear as completion entries when looking for `zdot`
  (( $+functions[_zdot::clear::$command] )) || {
    _zdot::log "Unknown command: $command"
    _zdot::clear::help
    return 1
  }

  _zdot::clear::$command "$@"
}

function _zdot::clear::help() {
  cat <<EOF
Usage: zdot clear <command> [options]

Available commands:

  antidote            Clear antidote cache and config
  cache               Clear the zdot cache directory
  config              Clear cached ${ZDOT_ANTIDOTE_PLUGINS_NAME}.zsh config file
  help, -h, --help    Usage information

EOF
}

function _zdot::clear::antidote() {
  [[ -d "$(antidote home)" ]] && (
    _zdot::log "clear antidote cache"
    rm -rf "$(antidote home)"
    _zdot::logsuccess "clear antidote cache"
  )

  zdot clear config
  zdot reload
}

function _zdot::clear::cache() {
  _zdot::log "clear zdot cache directory"
  rm -rf "$ZDOT_CACHE" &&
  _zdot::logsuccess "clear zdot cache directory"
}

function _zdot::clear::config() {
  [[ -f "$ZDOT_ANTIDOTE_PLUGIN_CACHE" ]] && (
    _zdot::log "remove cached ${ZDOT_ANTIDOTE_PLUGINS_NAME}.zsh config file"
    rm "$ZDOT_ANTIDOTE_PLUGIN_CACHE"
    _zdot::logsuccess "remove cached ${ZDOT_ANTIDOTE_PLUGINS_NAME}.zsh config file"
  )
}
