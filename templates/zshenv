#!/usr/bin/env zsh
#
# Define environment variables for login, non-login, interactive and
# non-interactive shells.
#
# Authors:
#   Larry Gordon
#
# Execution Order
#   https://github.com/psyrendust/alf/templates/home
#
# License:
#   The MIT License (MIT) <http://psyrendust.mit-license.org/2014/license.html>
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Setup options
# ------------------------------------------------------------------------------
setopt EXTENDED_GLOB

# Add brew-cask default options
# OPTION              LOCATION                      DESCRIPTION
# --appdir            /Applications                 Changes the path where the symlinks to the installed applications will be generated.
# --binarydir         /usr/local/bin                Changes the path for binary symlinks.
# --caskroom          /opt/homebrew-cask/Caskroom   Determines where the actual applications will be located.
# --fontdir           ~/Library/Fonts               Changes the path for Fonts symlinks.
# --input_methoddir   ~/Library/Input\ Methods      Changes the path for Input Methods symlinks.
# --prefpanedir       ~/Library/PreferencePanes     Changes the path for PreferencePane symlinks.
# --qlplugindir       ~/Library/QuickLook           Changes the path for Quicklook Plugin symlinks.
# --screen_saverdir   ~/Library/Screen\ Savers      Changes the path for Screen Saver symlinks.
export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/opt/homebrew-cask/Caskroom --fontdir=~/Library/Fonts --input_methoddir=~/Library/Input\ Methods --prefpanedir=~/Library/PreferencePanes --qlplugindir=~/Library/QuickLook --screen_saverdir=~/Library/Screen\ Savers"
export GOPATH="$HOME/.go"
export GOROOT="/usr/local/opt/go/libexec"
export JAVA_VERSION=1.7
export JAVA_HOME="$(/usr/libexec/java_home)"

# ------------------------------------------------------------------------------
# Setup paths
# ------------------------------------------------------------------------------
typeset -a __path_pre __path_post __manpath_pre __manpath_post

export ZSH_CUSTOM="$HOME/.dotfiles"

# shortcut for: $(/usr/local/bin/brew --prefix coreutils)
# __brew_coreutils="/usr/local/opt/coreutils"

# Custom path locations for my plugins
__path_pre+=("$ZSH_CUSTOM/plugins/asciinema2gif/bin")
# __path_pre+=("$ZSH_CUSTOM/plugins/safe-rm/bin")
__path_pre+=("$ZSH_CUSTOM/plugins/pretty-print/bin")
__path_pre+=("$ZSH_CUSTOM/plugins/sublime/bin")
__path_pre+=("$ZSH_CUSTOM/plugins/npmlist/bin")
__path_pre+=("$ZSH_CUSTOM/plugins/textcleaner/bin")
__path_pre+=("$ZSH_CUSTOM/bin")
__path_pre+=("$HOME/.tmpbin")

# Add homebrew Core Utilities
# __path_pre+=("$__brew_coreutils/libexec/gnubin")

# Add GOPATH and GOROOT
[[ -d "$GOPATH/bin" ]] && __path_pre+=("$GOPATH/bin")
[[ -d "$GOROOT/bin" ]] && __path_pre+=("$GOROOT/bin")

# Add homebrews bin
__path_pre+=("/usr/local/bin")

# Add manpath
__manpath_pre+=("/usr/local/share/man")

# Add homebrew Core Utilities man
# __manpath_pre+=("$__brew_coreutils/libexec/gnuman")


# ------------------------------------------------------------------------------
# Apply PATHS
# ------------------------------------------------------------------------------
export MANPATH="$([[ ${#__manpath_pre} > 0 ]] && printf "%s:" "${__manpath_pre[@]}")$MANPATH$([[ ${#__manpath_post} > 0 ]] && printf ":%s" "${__manpath_post[@]}")"
export PATH="$([[ ${#__path_pre} > 0 ]] && printf "%s:" "${__path_pre[@]}")$PATH$([[ ${#__path_post} > 0 ]] && printf ":%s" "${__path_post[@]}")"

unset __path_pre
unset __path_post
unset __manpath_pre
unset __manpath_post
# unset __brew_coreutils

# ------------------------------------------------------------------------------
# Fix Yosemite Open File Limit Node.js Errors
# http://blog.mact.me/2014/10/22/yosemite-upgrade-changes-open-file-limit
# http://superuser.com/questions/827984/open-files-limit-does-not-work-as-before-in-osx-yosemite#answer-1171026
# ------------------------------------------------------------------------------
__limit_maxfiles_plist="/Library/LaunchDaemons/limit.maxfiles.plist"
if [[ ! -s "${__limit_maxfiles_plist}" ]]; then
  echo "Missing: ${__limit_maxfiles_plist}";
  echo "Creating: ${__limit_maxfiles_plist}";
  cat << EOM | sudo tee "${__limit_maxfiles_plist}"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>limit.maxfiles</string>
    <key>ProgramArguments</key>
    <array>
      <string>launchctl</string>
      <string>limit</string>
      <string>maxfiles</string>
      <string>64000</string>
      <string>524288</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>ServiceIPC</key>
    <false/>
  </dict>
</plist>
EOM
  sudo chown root:wheel "${__limit_maxfiles_plist}"
  sudo launchctl load -w "${__limit_maxfiles_plist}"
  launchctl limit maxfiles
fi
unset __limit_maxfiles_plist

# ------------------------------------------------------------------------------
# Load up necessary scripts
# ------------------------------------------------------------------------------
# Load any private github api tokens
[[ -s "$HOME/Dropbox/Larry/Apps/github/apiTokens.sh" ]] && source "$HOME/Dropbox/Larry/Apps/github/apiTokens.sh"
# Load any private github api tokens
[[ -s "$HOME/Dropbox/Larry/Apps/ChromeWebStore/key.sh" ]] && source "$HOME/Dropbox/Larry/Apps/ChromeWebStore/key.sh"
# Load up nvm
# nvm.sh -> to thwart nvm's install.sh
[[ -s "$HOME/.init_nvm" ]] && source "$HOME/.init_nvm" # Load nvm


# ------------------------------------------------------------------------------
# Do some platform checks so we don't have to keep doing it later
# ------------------------------------------------------------------------------
export ZSH_UNAME=`uname`
if [[ $ZSH_UNAME == *Darwin* ]]; then
  # We are using OS X
  export PLATFORM_IS_MAC=1

elif [[ $ZSH_UNAME == *CYGWIN* ]]; then
  # We are using Cygwin in Windows
  export PLATFORM_IS_CYGWIN=1

elif [[ $ZSH_UNAME == *Linux* ]]; then
  # We are using Linux
  export PLATFORM_IS_LINUX=1
fi
# Add support for all systems
export PLATFORM_IS_ALL=1
