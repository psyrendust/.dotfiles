#!/usr/bin/env zsh
#
# Check for brew formulas that have not been installed
#
# Authors:
#   Larry Gordon
#
# License:
#   The MIT License (MIT) <http://psyrendust.mit-license.org/2014/license.html>
# ------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------
# Initialize our environment
# --------------------------------------------------------------------------------------------------
if [[ -n "$(which datetimestamp | grep "not found")" ]]; then
  myhome="/Users/$(whoami)"
  source "$myhome/.dotfiles/templates/zshenv.zsh"
  source "$myhome/.dotfiles/templates/zpaths.zsh"
fi


# --------------------------------------------------------------------------------------------------
# Setup logging
# --------------------------------------------------------------------------------------------------
[ ! -d "$ZDOT_CACHE" ] && mkdir -p "$ZDOT_CACHE"
logfile="$ZDOT_CACHE/check-install.log"
loglen="143"
logDecisionMsg=""
[ ! -f $logfile ] && touch $logfile
function log() { echo $@ >> $logfile }
function logReset() { echo -n "" > $logfile }
function logTime() { log "| last checked at: $(datetimestamp)" }
function logBegin() { log "------------------------------------------------------------------------------------------------------------------------" }
function logHr() { log "| ------------------------------------------------------------------------------" }
function logHeader() { logHr; log "| $1" }
function logTitle() { log "| ||||    $1    ||||" }
function logInfo() { log "|   -- $1" }
function logDecision() { logDecisionMsg="$1" }
function logYes() { log "|   [ ✅ ] $logDecisionMsg $1" }
function logNo() { log "|   [ ❌ ] $logDecisionMsg $1" }
function logEnd() { log ""; log "" }
if test "$(wc -l < $logfile)" -gt "$loglen"; then
  logReset
fi


# Create an associative array for {key:value} pairs
# @see https://scriptingosx.com/2019/11/associative-a`rrays-in-zsh/
declare -A brew_formula_apps
declare -A brew_formula_fonts
declare -A brew_formula_quicklook
declare -A brew_formulas
# Create arrays
local brew_formulas_missing=()
local cleanup_quarantine_attributes=()
local npm_global_packages=()
local npm_packages_missing=()


logBegin
logTime
logHr
# --------------------------------------------------------------------------------------------------
logTitle "npm package check"
# --------------------------------------------------------------------------------------------------
npm_global_packages=(
  "@aventyret/change-case-cli"
  "alfred-fkill"
  "alfred-npms"
  "chalk-cli"
  "fkill-cli"
  "jest"
  "live-server"
  "trash-cli"
)

# ------------------------------------------------------------------------------
logHeader "npm_global_packages: ${#npm_global_packages[@]}"
# ------------------------------------------------------------------------------
for pkg in ${npm_global_packages[@]}; do logInfo "$pkg"; done

# ------------------------------------------------------------------------------
logHeader "Check for missing npm packages"
# ------------------------------------------------------------------------------
installed_npm_global_packages="$(npm list --location=global --depth=0)"
for pkg in ${npm_global_packages[@]}; do
  logDecision "found npm package [ $pkg ]"
  if [[ -z "$(echo $installed_npm_global_packages | grep "$pkg")" ]]; then
    logNo
    npm_packages_missing+=("$pkg")
  else
    logYes
  fi
done

# ------------------------------------------------------------------------------
logHeader "missing npm packages: ${#npm_packages_missing[@]}"
# ------------------------------------------------------------------------------
for pkg in ${npm_packages_missing[@]}; do logInfo "  $pkg"; done

# ------------------------------------------------------------------------------
logHeader "Report missing npm packages and ask if we should install them"
# ------------------------------------------------------------------------------
if [[ ! ${#npm_packages_missing[@]} -eq 0 ]]; then
  log "|   ask if we should install missing npm packages"
  logDecision "Should we install missing npm packages"
  printf "\033[0;31mMissing npm packages:\033[0m\n"
  printf --  \
    "  - \033[0;31m%s\033[0m: not installed\n" \
    "${npm_packages_missing[@]}"
  printf "\n"
  printf "Install? [y/N]: "
  if read -q; then
    logYes
    echo;
    logDecision "installing missing packages"
    npm install --location=global ${npm_packages_missing[@]} && logYes || logNo
  else
    logNo
  fi
  echo
else
  log "|   nothing to ask; no missing npm packages"
fi


# --------------------------------------------------------------------------------------------------
logHr; logTitle "homebrew formulas check"
# --------------------------------------------------------------------------------------------------
# key: location
# val: formula name
# Regular bash executables
brew_formulas=(
  ["$ZDOT_BREW_ROOT/bin/bash"]="bash"
  ["$ZDOT_BREW_ROOT/bin/bat"]="bat"
  ["$ZDOT_BREW_ROOT/bin/bfs"]="bfs"
  ["$ZDOT_BREW_ROOT/opt/coreutils"]="coreutils"
  ["$ZDOT_BREW_ROOT/bin/delta"]="git-delta"
  ["$ZDOT_BREW_ROOT/bin/eza"]="eza"
  ["$ZDOT_BREW_ROOT/bin/fd"]="fd"
  ["$ZDOT_BREW_ROOT/bin/fzf"]="fzf"
  ["$ZDOT_BREW_ROOT/bin/gpg"]="gpg"
  ["$ZDOT_BREW_ROOT/bin/git"]="git"
  ["$ZDOT_BREW_ROOT/bin/git-recent"]="git-recent"
  ["$ZDOT_BREW_ROOT/bin/jq"]="jq"
  ["$ZDOT_BREW_ROOT/bin/op"]="1password-cli"
  ["$ZDOT_BREW_ROOT/bin/pyenv"]="pyenv"
  ["$ZDOT_BREW_ROOT/bin/pygmentize"]="pygments"
  ["$ZDOT_BREW_ROOT/bin/rg"]="ripgrep"
  ["$ZDOT_BREW_ROOT/bin/swda"]="swiftdefaultappsprefpane"
  ["$ZDOT_BREW_ROOT/bin/tag"]="tag"
  ["$ZDOT_BREW_ROOT/bin/tree"]="tree"
  ["$ZDOT_BREW_ROOT/bin/zsh"]="zsh"
)
# Apps
brew_formula_apps=(
  ["$ZDOT_BREW_ROOT/Caskroom/rectangle"]="rectangle"
)
brew_formulas+=(${(kv)brew_formula_apps})
# Quicklook plugins
# @see https://github.com/sindresorhus/quick-look-plugins#install-all
brew_formula_quicklook=(
  ["$ZDOT_BREW_ROOT/Caskroom/qlmarkdown"]="qlmarkdown"
  ["$ZDOT_BREW_ROOT/Caskroom/syntax-highlight"]="syntax-highlight"
  ["$ZDOT_BREW_ROOT/Caskroom/qlstephen"]="qlstephen"
  ["$ZDOT_BREW_ROOT/Caskroom/suspicious-package"]="suspicious-package"
)
brew_formulas+=(${(kv)brew_formula_quicklook})
# Dev Fonts
brew_formula_fonts=(
  ["$ZDOT_BREW_ROOT/Caskroom/font-hack-nerd-font"]="font-hack-nerd-font"
  ["$ZDOT_BREW_ROOT/Caskroom/font-dejavu-sans-mono-for-powerline"]="font-dejavu-sans-mono-for-powerline"
  ["$ZDOT_BREW_ROOT/Caskroom/font-meslo-lg-nerd-font"]="font-meslo-lg-nerd-font"
  ["$ZDOT_BREW_ROOT/Caskroom/font-roboto"]="font-roboto"
  ["$ZDOT_BREW_ROOT/Caskroom/font-roboto-mono"]="font-roboto-mono"
)
brew_formulas+=(${(kv)brew_formula_fonts})

# ------------------------------------------------------------------------------
logHeader "brew_formulas: ${#brew_formulas[@]}"
# ------------------------------------------------------------------------------
for value in ${(v)brew_formulas}; do logInfo "$value"; done

# ------------------------------------------------------------------------------
logHeader "Check for missing formulas"
# ------------------------------------------------------------------------------
for key value in ${(kv)brew_formulas}; do
  logDecision "found brew formula [ $key ] - [ $value ]"
  if [[ ! -a "$key" ]]; then
    logNo
    brew_formulas_missing+=("$value")
    logDecision "is missing formula a quicklook plugin $value"
    if [[ -n $(echo "${(v)brew_formula_quicklook}" | grep "$value") ]]; then
      logYes
      cleanup_quarantine_attributes+=("$key")
    else
      logNo
    fi
  else
    logYes
  fi
done

# ------------------------------------------------------------------------------
logHeader "missing formulas: ${#brew_formulas_missing[@]}"
# ------------------------------------------------------------------------------
for value in ${brew_formulas_missing[@]}; do logInfo "$value"; done

# ------------------------------------------------------------------------------
logHeader "Report missing formulas and ask if we should install them"
# ------------------------------------------------------------------------------
if [[ ! ${#brew_formulas_missing[@]} -eq 0 ]]; then
  log "|   ask if we should install missing formulas"
  logDecision "Should we install missing formulas"
  printf "\033[0;31mMissing homebrew formulas:\033[0m\n"
  printf --  \
    "  - \033[0;31m%s\033[0m: not installed\n" \
    "${brew_formulas_missing[@]}"
  printf "\n"
  printf "Install? [y/N]: "
  if read -q; then
    logYes
    echo;
    logDecision "installing missing formulas"
    brew install ${brew_formulas_missing[@]} && logYes || logNo
  else
    logNo
  fi
  echo
else
  log "|   nothing to ask; no missing formulas"
fi

# ------------------------------------------------------------------------------
logHeader "Cleanup quarantine attributes: ${#cleanup_quarantine_attributes[@]}"
# ------------------------------------------------------------------------------
for key in ${cleanup_quarantine_attributes[@]}; do
  logDecision "cleaning quarantine attribute [ $key ]"
  xattr -dr com.apple.quarantine "$key" && logYes || logNo
done

logEnd
